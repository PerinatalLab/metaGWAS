import pandas as pd
import numpy as np

CHR_nms= ['01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20','21','22']
sample_nms= ['moms', 'fets', 'dads']

rule extract_regions_haplotype:
        ''
        input:
                '/mnt/work/pol/metaGWAS/topregions/top_variants/GAraw.txt'
        output:
                '/mnt/work/pol/metaGWAS/effect_origin/single_variant/variants_to_extract.txt'
        run:
                d= pd.read_csv(input[0], sep= '\t', header= 0)
                d.sort_values(['CHR', 'POS'], ascending= True, inplace= True)
                df= d[['CHR', 'POS', 'POS']]
                df.to_csv(output[0], sep= '\t', header= False, index= False)


rule list_trio_ids:
        'Make a list of trio IDs with genotype data.'
        input:
                '/mnt/archive/hunt/phenotypes/mfr/MFR.txt',
                '/mnt/archive/hunt/genotypes/plink/genotyped_PID106764.fam'
        output:
                '/mnt/work/pol/metaGWAS/effect_origin/processed_data/fets_toextract.txt',
                '/mnt/work/pol/metaGWAS/effect_origin/processed_data/moms_toextract.txt',
		'/mnt/work/pol/metaGWAS/effect_origin/processed_data/dads_toextract.txt',
                '/mnt/work/pol/metaGWAS/effect_origin/processed_data/parent_offspring_trios.txt'
        run:
                d= pd.read_csv(input[0], sep= '\t', header= 0)
                x= pd.read_csv(input[1], sep= ' ', header= None, names= ['ID1', 'ID2', 'x1', 'x2', 'x3', 'x4'])
		d['BARN_PID']= pd.to_numeric(d.BARN_PID, errors= 'coerce')
                d.dropna(subset= ['BARN_PID'], inplace= True)
                d['MOR_PID']= pd.to_numeric(d.MOR_PID, errors= 'coerce')
                d.dropna(subset= ['MOR_PID'], inplace= True)
		d['FAR_PID']= pd.to_numeric(d.FAR_PID, errors= 'coerce')
                d.dropna(subset= ['FAR_PID'], inplace= True)
                d= d.loc[d.BARN_PID.isin(x.ID1.values), :]
		d= d.loc[d.MOR_PID.isin(x.ID1.values), :]
		d= d.loc[d.FAR_PID.isin(x.ID1.values), :]
		d['BARN_PID']= d.BARN_PID.apply(int).apply(str)
                d['MOR_PID']= d.MOR_PID.apply(int).apply(str)
                d['FAR_PID']= d.FAR_PID.apply(int).apply(str)
                mor= d.drop_duplicates(subset= ['MOR_PID'], keep= 'first')
		far= d.drop_duplicates(subset= ['FAR_PID'], keep= 'first')
		barn= d.drop_duplicates(subset= ['BARN_PID'], keep= 'first')
		d['PREG_ID']= 'PREG' + '_' + d.MOR_PID.apply(str) + '_' + d.BARN_PID.apply(str) + '_' + d.FAR_PID.apply(str)
                barn.to_csv(output[0], columns= ['BARN_PID'], sep= '\t', header= False, index= False)
                mor.to_csv(output[1], columns= ['MOR_PID'], sep= '\t', header= False, index= False)
		far.to_csv(output[2], columns= ['FAR_PID'], sep= '\t', header= False, index= False)
		d= d[['PREG_ID', 'MOR_PID', 'BARN_PID', 'FAR_PID']]
                d.to_csv(output[3], sep= '\t', header= True, index= False)

rule extract_GT:
	''
	input:
		'/mnt/work/pol/metaGWAS/effect_origin/single_variant/variants_to_extract.txt',
		'/mnt/work/pol/metaGWAS/effect_origin/processed_data/{sample}_toextract.txt',
                '/mnt/archive/hunt/genotypes/vcf/CHR{CHR}_PID106764.vcf.gz'
	output:
		temp('/mnt/work/pol/metaGWAS/effect_origin/to_phase/data/temp/{sample}_{CHR}.txt')
	shell:
		"bcftools query -S {input[1]} -R {input[0]} -f '%CHROM\t%POS\t%REF\t%ALT[\t%GT]\n' {input[2]} -o {output[0]}"

rule add_header_GT:
        'Add header to genotype files.'
        input:
                '/mnt/work/pol/metaGWAS/effect_origin/processed_data/{sample}_toextract.txt',
                '/mnt/work/pol/metaGWAS/effect_origin/to_phase/data/temp/{sample}_{CHR}.txt'
        output:
                temp('/mnt/work/pol/metaGWAS/effect_origin/processed_data/GT/{sample}_GT{CHR}')
        run:
                cols= ['chr','pos','ref','eff'] + [line.strip() for line in open(input[0], 'r')]
                d= pd.read_csv(input[1], header= None, names= cols, sep= '\t')
                d.drop_duplicates(['chr', 'pos'], keep=False, inplace= True)
                d.to_csv(output[0], sep= '\t', header= True, index= False)

rule concat_GT_chr:
        'Collect GT from all CHR.'
        input:
                expand('/mnt/work/pol/metaGWAS/effect_origin/processed_data/GT/{{sample}}_GT{CHR}', CHR= CHR_nms)
        output:
                '/mnt/work/pol/metaGWAS/effect_origin/processed_data/GT/allchr/{sample}_GT.txt'
        shell:
                '''
                set +o pipefail;
                head -1 {input[0]} > {output[0]}
                cat {input} | grep -v 'chr' >> {output[0]}
                '''

rule get_allele_transmission:
        'Retrieve allele transmission from family trios (phasing included).'
        input:
                '/mnt/work/pol/metaGWAS/effect_origin/processed_data/GT/allchr/fets_GT.txt',
                '/mnt/work/pol/metaGWAS/effect_origin/processed_data/GT/allchr/moms_GT.txt',
                '/mnt/work/pol/metaGWAS/effect_origin/processed_data/parent_offspring_trios.txt',
		'/mnt/work/pol/metaGWAS/effect_origin/processed_data/GT/allchr/dads_GT.txt'
        output:
                '/mnt/work/pol/metaGWAS/effect_origin/single_variant/processed_data/haplotypes/MT_PREG_ID',
                '/mnt/work/pol/metaGWAS/effect_origin/single_variant/processed_data/haplotypes/MnT_PREG_ID',
                '/mnt/work/pol/metaGWAS/effect_origin/single_variant/processed_data/haplotypes/PT_PREG_ID',
		'/mnt/work/pol/metaGWAS/effect_origin/single_variant/processed_data/haplotypes/PnT_PREG_ID'
        script:
                'allele_transmission.py'

rule haplotype_based_analysis:
        ''
        input:
                '/mnt/work/pol/metaGWAS/effect_origin/single_variant/processed_data/haplotypes/MT_PREG_ID',
                '/mnt/work/pol/metaGWAS/effect_origin/single_variant/processed_data/haplotypes/MnT_PREG_ID',
                '/mnt/work/pol/metaGWAS/effect_origin/single_variant/processed_data/haplotypes/PT_PREG_ID',
                '/mnt/work/pol/metaGWAS/pheno/trio_pheno.txt',
		'/mnt/work/pol/metaGWAS/effect_origin/trio_confirmed.txt'
        output:
                '/mnt/work/pol/metaGWAS/effect_origin/results/HUNT.txt'
        script:
                'linear_hypotheses.R'

