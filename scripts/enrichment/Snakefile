
from functools import reduce
import pandas as pd
import numpy as np
import scipy.stats as st
import math
import sys

def enrichment_binary(base, i_list, l0, l1):
	if ~all(np.isin(i_list, np.concatenate([l0, l1]))):
		print('Not all the elements in your set of genes are found in the ' + base + ' set of genes.')
	i_list= [gene for gene in i_list if gene in np.concatenate([l0, l1])]
	x1= len([gene for gene in l0 if gene not in i_list])
	x2= len([gene for gene in l1 if gene not in i_list])
	x3= len([gene for gene in i_list if gene in l0])
	x4= len([gene for gene in i_list if gene in l1])
	prop_i= x4 / (x3 + x4)
	prop_base= x2 / (x1 + x2)
	xtab= np.array([[x1,x3], [x2, x4]])
	chi2_pvalue= st.chi2_contingency(xtab)[1]
	return([base, prop_i, prop_base, chi2_pvalue])

rule select_top:
	'Select genetic variants with cumulative PP== 0.99.'
	input:
		'/mnt/hdd/common/pol/metaGWAS/FINEMAPPING/results/PP_{pheno}.txt'
	output:
		'/mnt/hdd/common/pol/metaGWAS/enrichment/variants/{pheno}_CS95.txt',
		'/mnt/hdd/common/pol/metaGWAS/enrichment/variants/{pheno}_nonCS95.txt'
	run:
		d= pd.read_csv(input[0], sep= '\t', header= 0)
		top_list= list()
		non_top_list= list()
		for lname in set(d.locus):
			df_temp= d.loc[d.locus== lname, :]
			df_temp.sort_values(['PP'], ascending= False, inplace= True)
			df_temp['PPcum']= df_temp.PP.cumsum()
			top_vars= df_temp.loc[df_temp.PPcum< 0.95, :]
			non_top= df_temp.loc[df_temp.PPcum>= 0.95, :]
			top_list.append(top_vars)
			non_top_list.append(non_top)
		top= pd.concat(top_list)
		non_top= pd.concat(non_top_list)
		top.to_csv(output[0], sep= '\t', header= True, index= False)
		non_top.to_csv(output[1], sep= '\t', header= True, index= False)

rule enrichment_pLI:
	'Enrichment in intolerance to heterozygous pLoF variation (pLI).'
	input:
		'/mnt/hdd/common/pol/metaGWAS/topregions/top_variants/{pheno}.txt',
		'/mnt/hdd/common/pol/references/GNOMAD/gnomad.v2.1.1.lof_metrics.by_gene.txt.gz'
	output:
		'/mnt/hdd/common/pol/metaGWAS/enrichment/GNOMAD/pLI_{pheno}.txt'
	run:
		d= pd.read_csv(input[0], sep='\t', header= 0)
		pli= pd.read_csv(input[1], header= 0, sep= '\t', usecols= ['gene_id', 'gene', 'chromosome', 'start_position', 'end_position', 'pLI'])[['gene_id', 'gene', 'chromosome', 'start_position', 'end_position', 'pLI']]
		pli.columns= ['EID', 'gene', 'CHR', 'start', 'end', 'pLI']
		pli.dropna(subset= ['pLI'], inplace= True)
		pli['CHR']= pd.to_numeric(np.where(pli.CHR== 'X', '23', pli.CHR), errors= 'coerce')
		pli.dropna(subset= ['CHR'], inplace= True)
		df= pd.merge(d, pli, on= 'CHR', how= 'inner')
#		df['mPOS']= df.loc[:, ['start', 'end']].mean(axis=1)
#		df['diff_mPOS']= abs(df.POS - df.mPOS)
#		df.sort_values(['diff_mPOS'], inplace= True)
#		df= df.groupby('ID').head(1)
		dist= 250000
		df= df.loc[((df.POS> df.start - dist) & (df.POS<= df.end + dist) & (df.pLI> 0.9)), :]
		q= df.shape[0] # number of white balls drawn without replacement from an urn which contains both black and white balls
		m= pli.loc[pli.pLI>= 0.9, :].shape[0] # the number of white balls in the urn
		n=  pli.shape[0] - pli.loc[pli.pLI>= 0.9, :].shape[0] # the number of black balls in the urn.
		k= d.loc[~d.ID.isin(df.ID), :].shape[0] + df.shape[0] #d.shape[0] # the number of balls drawn from the urn, hence must be in 0,1,..., m+n.
		oddsratio, pvalue = st.fisher_exact([[q, m - q ],[k - q, n - m - k + q]], alternative= 'greater')
		z= ['pli', q / (m -q), (k - q ) / (n - m - k + q), oddsratio, pvalue]
		with open(output[0], 'w') as file_handler:
			file_handler.write('\t'.join([str(item) for item in z]) + '\n')



rule enrichment_RNA:
	''
	input:
		'/mnt/hdd/common/pol/metaGWAS/topregions/top_variants/{pheno}.txt',
		'/mnt/hdd/common/pol/references/HCA/rna_consensus.tsv'
	output:
		'/mnt/hdd/common/pol/metaGWAS/enrichment/HPA/RNA_{pheno}.txt'
	run:
		d= pd.read_csv(input[0], sep= '\t', header= 0)
		rna= pd.read_csv(input[1], sep= '\t', header= 0)
		rna['GA']= np.where(rna['Gene name'].isin(d.nearestGene.values), 1, 0)
		rna['NX_rk']= rna.groupby('Gene name')['NX'].rank('average', ascending= True)
		df_list= list()
		for tissue in set(rna.Tissue):
			ilist= rna.loc[((rna.GA== 1) & (rna.Tissue == tissue)), 'NX_rk']
			base= rna.loc[((rna.GA== 0) & (rna.Tissue == tissue)), 'NX_rk']
			mannw_pvalue= st.mannwhitneyu(ilist, base, alternative= 'greater')[1]
			i_median= np.median(ilist)
			base_median= np.median(base)
			df_list.append([tissue, i_median, base_median, mannw_pvalue])
		z= pd.DataFrame.from_records(df_list)
		z.to_csv(output[0], sep= '\t', header= ['tissue', 'i_listmedian', 'base_list_median', 'MannW_pvalue'], index= False)

rule enrichment_dominant_recessive:
	'Enrichment analysis for dominant and recessive genes from MacArthur Lab.'
	input:
		'/mnt/hdd/common/pol/metaGWAS/topregions/top_variants/{pheno}.txt',
		'/mnt/hdd/common/pol/metaGWAS/processed_data/UCSC_gene_cds.txt',
		'/mnt/hdd/common/pol/references/MacArthurLab/all_ad.tsv',
		'/mnt/hdd/common/pol/references/MacArthurLab/all_ar.tsv'
	output:
		'/mnt/hdd/common/pol/metaGWAS/enrichment/MacArthur/diseases_{pheno}.txt'
	run:
		d= pd.read_csv(input[0], sep= '\t', header= 0, usecols= ['CHR', 'POS', 'ID'])
		x= pd.read_csv(input[1], sep= '\t', header= None, names= ['CHR', 'start', 'end', 'gene', 'EnsembleID'])
		df= pd.merge(d, x, on= 'CHR')
		dist= 250000
		df= df.loc[((df.POS> df.start - dist) & (df.POS<= df.end + dist)), :]
		add= [line.strip() for line in open(input[2], 'r')]
		q= df.loc[df.gene.isin(add), :].shape[0] # number of white balls drawn without replacement from an urn which contains both black and white balls
                m= len(add) # the number of white balls in the urn
                n= x.shape[0] - m # the number of black balls in the urn.
                k= d.loc[~d.ID.isin(df.ID), :].shape[0] + df.shape[0] #d.shape[0] # the number of balls drawn from the urn, hence must be in 0,1,..., m+n.
                oddsratio, pvalue = st.fisher_exact([[q, m - q ],[k - q, n - m - k + q]], alternative= 'greater')
                z= ['additive', q / (m -q), (k - q ) / (n - m - k + q), oddsratio, pvalue]
		with open(output[0], 'w') as file_handler:
                        file_handler.write('\t'.join([str(item) for item in z]) + '\n')
		rec= [line.strip() for line in open(input[3], 'r')]
		q= df.loc[df.gene.isin(rec), :].shape[0] # number of white balls drawn without replacement from an urn which contains both black and white balls
                m= len(add) # the number of white balls in the urn
                n= x.shape[0] - len(add)  # the number of black balls in the urn.
                k= d.loc[~d.ID.isin(df.ID), :].shape[0] + df.shape[0] #d.shape[0] # the number of balls drawn from the urn, hence must be in 0,1,..., m+n.
                oddsratio, pvalue = st.fisher_exact([[q, m - q ],[k - q, n - m - k + q]], alternative= 'greater')
                z= ['recessive', q / (m -q), (k - q ) / (n - m - k + q), oddsratio, pvalue]
		with open(output[0], 'a') as file_handler:
                        file_handler.write('\t'.join([str(item) for item in z]) + '\n')

rule enrichment_RNA_decidualization:
	'Enrichment in intolerance to heterozygous pLoF variation (pLI).'
	input:
		'/mnt/hdd/common/pol/metaGWAS/topregions/top_variants/{pheno}.txt',
		'/mnt/hdd/common/pol/metaGWAS/processed_data/UCSC_gene_cds.txt',
		'/mnt/hdd/common/pol/metaGWAS/stromal_cells/rna-seq/diff_expression.txt'
	output:
		'/mnt/hdd/common/pol/metaGWAS/enrichment/stromalRNA_{pheno}.txt'
	run:
		d= pd.read_csv(input[0], sep= '\t', header= 0, usecols= ['CHR', 'POS', 'ID', 'nearestGene'])
		x= pd.read_csv(input[1], sep= '\t', header= None, names= ['CHR', 'start', 'end', 'gene', 'EnsembleID'])
		df= pd.merge(d, x, on= 'CHR')
		stc= pd.read_csv(input[2], header= 0, sep= '\t', usecols= ['geneid', 'log2FoldChange', 'pvalue'])[['geneid', 'log2FoldChange', 'pvalue']]
                stc.columns= ['gene', 'log2FoldChange', 'pvalue']
		df= df.loc[df.gene.isin(stc.gene.values), :]
		dist= 250000
		df= df.loc[((df.POS> df.start - dist) & (df.POS<= df.end + dist)), :]
		stc.dropna(subset= ['pvalue'], inplace= True)
		df.drop_duplicates('gene', inplace= True)
		stc= stc.loc[stc.gene.isin(x.gene.values), :]
		stc1= stc.copy()
		stc= stc.loc[stc.pvalue< 0.05/ stc.shape[0], :]
		q= df.loc[df.gene.isin(stc.gene.values), :].shape[0] # number of white balls drawn without replacement from an urn which contains both black and white balls
		m= len(stc.gene) # the number of white balls in the urn
		n= stc1.shape[0] - m # the number of black balls in the urn.
		k= d.loc[~d.ID.isin(df.ID.values), :].shape[0] + df.shape[0] # the number of balls drawn from the urn, hence must be in 0,1,..., m+n.
		oddsratio, pvalue = st.fisher_exact([[q, m - q ],[k - q, n - m - k + q]], alternative= 'greater')
		z= ['non_biased', q / (m -q), (k - q ) / (n - m - k + q), oddsratio, pvalue]
		print(z)
		with open(output[0], 'w') as file_handler:
			file_handler.write('\t'.join([str(item) for item in z]) + '\n')
		glist= d.nearestGene.values.tolist()
		glist.extend(['DGUOK-AS1', 'WNT4', 'EDN2'])
		q= len([i for i in glist if i in stc.gene.values]) # number of white balls drawn without replacement from an urn which contains both black and white balls
                m= len(stc.gene) # the number of white balls in the urn
                n= stc1.shape[0] - m # the number of black balls in the urn.
                k= len(glist) #d.loc[~d.ID.isin(df.ID), :].shape[0] + df.shape[0] #d.shape[0] # the number of balls drawn from the urn, hence must be in 0,1,..., m+n.
                oddsratio, pvalue = st.fisher_exact([[q, m - q ],[k - q, n - m - k + q]], alternative= 'greater')
                z= ['candidate_list', q / (m -q), (k - q ) / (n - m - k + q), oddsratio, pvalue]
                with open(output[0], 'a') as file_handler:
                        file_handler.write('\t'.join([str(item) for item in z]) + '\n')
