import csv
import numpy as np
import gzip
import math
from scipy import stats



init_allPTD_file_nms= ['23andme-allPTD-RESULTS-pol', 'ALSPAC-allPTD-RESULTS-23042018', 'CHOP-allPTD-RESULTS-19062018_PSN', 'DECODE-allPTD-RESULTS-05072018', 'EGCUT-allPTD-RESULTS-210818','NFBC1966-allPTD-RESULTS-20180418', 'HUNT-allPTD-RESULTS-23102020', 'MOBAGENETICS-allPTD-add-RESULTS-24082021', 'DBDS-allPTD-RESULTS-30032020', 'DNBCGOYACASES-allPTD-RESULTS-17052018', 'DNBCGOYACONTROLS-allPTD-RESULTS-17052018', 'DNBCPTD-allPTD-RESULTS-15052018', 'DILT1DGC-allPTD-RESULTS-28052018', 'WTCCC58BC-allPTD-RESULTS-28052018', 'FINNGEN-allPTD-RESULTS', 'PGPIII-PTD259-RESULTS-23092021', 'PGPII-PTD259-RESULTS-23092021']

init_postTerm_file_nms= ['ALSPAC-postTerm-RESULTS-23042018', 'DECODE-postTerm-RESULTS-05072018', 'NFBC1966-postTerm-RESULTS-20180418', 'HUNT-postTerm-RESULTS-23102020', 'MOBAGENETICS-postTerm-add-RESULTS-24082021', 'DBDS-postTerm-RESULTS-30032020', 'EGCUT-postTerm-RESULTS-210818', 'DNBCGOYACASES-postTerm-RESULTS-17052018', 'DNBCGOYACONTROLS-postTerm-RESULTS-17052018', 'DILT1DGC-postTerm-RESULTS-28052018', 'WTCCC58BC-postTerm-RESULTS-28052018']

init_GAraw_file_nms= ['23andme-GAraw-RESULTS-pol', 'ALSPAC-GAraw-RESULTS-23042018', 'CHOP-GAraw-RESULTS-19062018_PSN', 'DECODE-GAraw-RESULTS-05072018', 'NFBC1966-GAraw-RESULTS-20180418', 'STORK-GAraw-RESULTS-28052018', 'STORKGROR-GAraw-RESULTS-28052018', 'HUNT-GAraw-RESULTS-18122018', 'MOBAGENETICS-GAraw-add-RESULTS-25022020', 'DBDS-GAraw-RESULTS-30032020', 'DNBCGOYACASES-GAraw-RESULTS-17052018', 'DNBCGOYACONTROLS-GAraw-RESULTS-17052018', 'DNBCPTD-GAraw-RESULTS-15052018', 'DILT1DGC-GAraw-RESULTS-28052018', 'WTCCC58BC-GAraw-RESULTS-28052018', 'CCHMC-GAraw-RESULTS-21042020', 'GPN-GAraw-RESULTS-21042020', 'Gen3G-GAraw-RESULTS-14052018_PSN', 'Viva-GAraw-RESULTS-05142018', 'PGPII-GAraw-RESULTS-08092021', 'PGPIII-GAraw-RESULTS-08092021', 'BIB-GAraw-RESULTS-15072018', 'EFSOCH-GAraw-RESULTS-18012018', 'HAPO-GAraw-RESULTS-15082018']

init_GAnrm_file_nms= ['ALSPAC-GAnrm-RESULTS-23042018', 'CHOP-GAnrm-RESULTS-19062018_PSN', 'DECODE-GAnrm-RESULTS-05072018', 'NFBC1966-GAnrm-RESULTS-20180418', 'STORK-GAnrm-RESULTS-28052018', 'STORKGROR-GAnrm-RESULTS-28052018', 'HUNT-GAnrm-RESULTS-18122018', 'MOBAGENETICS-GAnrm-add-RESULTS-25022020', 'DBDS-GAnrm-RESULTS-30032020', 'DNBCGOYACASES-GAnrm-RESULTS-17052018', 'DNBCGOYACONTROLS-GAnrm-RESULTS-17052018', 'DNBCPTD-GAnrm-RESULTS-15052018', 'DILT1DGC-GAnrm-RESULTS-28052018', 'WTCCC58BC-GAnrm-RESULTS-28052018', 'Gen3G-GAnrm-RESULTS-14052018_PSN', 'Viva-GAnrm-RESULTS-05142018', 'PGPII-GArn-RESULTS-08092021', 'PGPIII-GArn-RESULTS-08092021', 'BIB-GAnrm-RESULTS-15072018', 'EFSOCH-GAnrm-RESULTS-18012018',  'HAPO-GAnrm-RESULTS-15082018']

def is_number(s):
    if s != None:
        try:
            float(s)
            return True
        except ValueError:
            return False
    else: 
        return False

def format_list(infile, outfile):
	with gzip.open(infile, 'rt') as f:
		print(infile)
		dialect = csv.Sniffer().sniff(f.readline(), delimiters= ' \t')
		f.seek(0)
		print(dialect.delimiter)
		input_file= csv.DictReader(f, delimiter= dialect.delimiter)
		df_list= list()
		with open(outfile, 'w') as csvfile:
			writer = csv.writer(csvfile, delimiter= '\t')
			writer.writerow([g for g in ['CHR', 'POS', 'EAF', 'N', 'REF', 'EFF', 'BETA', 'SE', 'pvalue']])
		for row in input_file:
			if ('PGPII' in infile) and ('GAr' in infile): row['EAF_CONTR']= row['EAF_EFF_ALLELE']
			if ('HUNT' in infile) and ('GAraw' in infile): row['EAF_CONTR']= row['EAF']
			if ('NFBC' in infile):
				if (is_number(row['EAF_CONTR'])): row['EAF_CONTR']= 1 - float(row['EAF_CONTR'])
				if (is_number(row['BETA_ADD'])): row['BETA_ADD']= -1 * float(row['BETA_ADD'])
			if ('Viva' in infile) and ('GA' in infile): row['EAF_CONTR']= row['EAF_ALL']
			if ('PGP' in infile) and ('PTD' in infile): row['EAF_CONTR']= row['EAF_CASES'] 
			if 'DECODE' in infile: row['EAF_CONTR'], row['CHR'], row['POS'], row['REF_ALLELE'], row['EFF_ALLELE'], row['BETA_ADD'], row['SE_ADD'], row['N'], row['P_VAL_ADD'], row['RSID']= row['EAF_CASES'], row['BUILD'], row['CHR'], row['EFF_ALLELE'], row['POS'], row['EAF_CONTR'], row['BETA_ADD'], row['REF_ALLELE'], row['SE_ADD'], row['SNPID']
			if ((row['BETA_ADD'] == '.') | (row['BETA_ADD']== 'NA') | (row['SE_ADD']!= row['SE_ADD']) | (row['BETA_ADD'] != row['BETA_ADD']) | (row['EAF_CONTR'] != row['EAF_CONTR'])): continue
			if not is_number(row['BETA_ADD']):
				continue
			else:
				row['BETA_ADD']= float(row['BETA_ADD'])
			if not is_number(row['SE_ADD']):
				continue
			else:
				row['SE_ADD']= float(row['SE_ADD'])
			if not is_number(row['N']):
				continue
			if not is_number(row['P_VAL_ADD']):
				continue
			if is_number(row['EAF_CONTR']):
				eaf=  row['EAF_CONTR']
			else:
				eaf= ''
			if 'INFO' in row: 
				if is_number(row['INFO']):
					if float(row['INFO'])< 0.4:
						continue
			row['CHR']= row['CHR'].replace('X', '23')
			if not is_number(row['CHR']):
				continue
			if len(row['REF_ALLELE']) > len(row['EFF_ALLELE']): row['REF_ALLELE']= 'I'
			if len(row['EFF_ALLELE']) > len(row['REF_ALLELE']): row['EFF_ALLELE']= 'I'
			if row['REF_ALLELE']== 'I': row['EFF_ALLELE']= 'D'
			if row['EFF_ALLELE']== 'I': row['REF_ALLELE']= 'D'
			if ('23andme' in infile) and ('GAraw' in infile): 
				row['BETA_ADD']= row['BETA_ADD'] * 7
				row['SE_ADD']= row['SE_ADD'] * 7
			df_list.append([int(row['CHR']), int(row['POS']), eaf, int(row['N']), row['REF_ALLELE'], row['EFF_ALLELE'], row['BETA_ADD'], row['SE_ADD'], row['P_VAL_ADD']])
			if len(df_list)== 10**6:
				with open(outfile, 'a', newline= '') as file_handler:
					writer1= csv.writer(file_handler, delimiter= '\t')
					for item in df_list:
						writer1.writerow(item)
				df_list= list()
		with open(outfile, 'a', newline= '') as file_handler:
			writer1= csv.writer(file_handler, delimiter= '\t')
			for item in df_list:
				writer1.writerow(item)

rule format_sumstats_allPTD:
    'Format sumstats preterm birth cohorts.'
    input:
        '/mnt/hdd/data/sumstats/GAmetaGWAS/{init_allPTD_file}.txt.gz'
    output:
        temp('/mnt/hdd/common/pol/metaGWAS/sumstats/allPTD/temporal/{init_allPTD_file}_temp.txt')
    run:
        format_list(input[0], output[0])

rule mv_formatted_sumstats_allPTD:
	''
	input:
		expand('/mnt/hdd/common/pol/metaGWAS/sumstats/allPTD/temporal/{init_allPTD_file}_temp.txt', init_allPTD_file= init_allPTD_file_nms)
	output:
		expand('/mnt/hdd/common/pol/metaGWAS/sumstats/allPTD/{allPTD_coh}_temp.txt', allPTD_coh= allPTD_coh_nms)
	params:
		'/mnt/hdd/common/pol/metaGWAS/sumstats/allPTD/'
	run:
		for infile in input:
			outfile= params[0] + infile.split('-')[0].split('/')[-1] + '_temp.txt'
			shell('mv {infile} {outfile}')

rule format_sumstats_postTerm:
    'Format sumstats postTerm birth cohorts.'
    input:
        '/mnt/hdd/data/sumstats/GAmetaGWAS/{init_postTerm_file}.txt.gz'
    output:
        temp('/mnt/hdd/common/pol/metaGWAS/sumstats/postTerm/temporal/{init_postTerm_file}_temp.txt')
    run:
        format_list(input[0], output[0])

rule mv_formatted_sumstats_postTerm:
        ''
        input:
                expand('/mnt/hdd/common/pol/metaGWAS/sumstats/postTerm/temporal/{init_postTerm_file}_temp.txt', init_postTerm_file= init_postTerm_file_nms)
        output:
                expand('/mnt/hdd/common/pol/metaGWAS/sumstats/postTerm/{postTerm_coh}_temp.txt', postTerm_coh= postTerm_coh_nms)
        params:
                '/mnt/hdd/common/pol/metaGWAS/sumstats/postTerm/'
        run:
                for infile in input:
                        outfile= params[0] + infile.split('-')[0].split('/')[-1] + '_temp.txt'
                        shell('mv {infile} {outfile}')

rule format_sumstats_GAraw:
    'Format sumstats GAraw cohorts.'
    input:
        '/mnt/hdd/data/sumstats/GAmetaGWAS/{init_GAraw_file}.txt.gz'
    output:
        temp('/mnt/hdd/common/pol/metaGWAS/sumstats/GAraw/temporal/{init_GAraw_file}_temp.txt')
    run:
        format_list(input[0], output[0])

rule mv_formatted_sumstats_GAraw:
        ''
        input:
                expand('/mnt/hdd/common/pol/metaGWAS/sumstats/GAraw/temporal/{init_GAraw_file}_temp.txt', init_GAraw_file= init_GAraw_file_nms)
        output:
                expand('/mnt/hdd/common/pol/metaGWAS/sumstats/GAraw/{GAraw_coh}_temp.txt', GAraw_coh= GAraw_coh_nms)
        params:
                '/mnt/hdd/common/pol/metaGWAS/sumstats/GAraw/'
        run:
                for infile in input:
                        outfile= params[0] + infile.split('-')[0].split('/')[-1] + '_temp.txt'
                        shell('mv {infile} {outfile}')


rule format_sumstats_GAnrm:
    'Format sumstats GAnrm cohorts.'
    input:
        '/mnt/hdd/data/sumstats/GAmetaGWAS/{init_GAnrm_file}.txt.gz'
    output:
        temp('/mnt/hdd/common/pol/metaGWAS/sumstats/GAnrm/temporal/{init_GAnrm_file}_temp.txt')
    run:
        format_list(input[0], output[0])

rule mv_formatted_sumstats_GAnrm:
        ''
        input:
                expand('/mnt/hdd/common/pol/metaGWAS/sumstats/GAnrm/temporal/{init_GAnrm_file}_temp.txt', init_GAnrm_file= init_GAnrm_file_nms)
        output:
                expand('/mnt/hdd/common/pol/metaGWAS/sumstats/GAnrm/{GAnrm_coh}_temp.txt', GAnrm_coh= GAnrm_coh_nms)
        params:
                '/mnt/hdd/common/pol/metaGWAS/sumstats/GAnrm/'
        run:
                for infile in input:
                        outfile= params[0] + infile.split('-')[0].split('/')[-1] + '_temp.txt'
                        shell('mv {infile} {outfile}')

rule format_1KG_HRC:
	'Format 1KG and HRC'
	input:
		'/mnt/hdd/data/geno/references/HRC.r1-1.GRCh37.wgs.mac5.sites.tab',
		'/home/pol/software/EASYQC/1000GP_p3v5_legends_rbind.noDup.noMono.noCnv.noCnAll.afref.EUR.txt.gz'
	output:
		'/mnt/hdd/common/pol/metaGWAS/processed_data/HRC_1KG.txt.gz'
	run:
		d= pd.read_csv(input[0], header= 0, sep= '\t', usecols= ['#CHROM', 'POS', 'REF', 'ALT', 'AF_EXCLUDING_1000G'])
		d.columns= ['CHR', 'POS', 'REF', 'ALT', 'eaf']
		d['CHR']= np.where(d.CHR=='X', '23', d.CHR)
		KG= pd.read_csv(input[1], header= 0, sep='\t', compression= 'gzip', names= ['ID', 'ALT', 'REF', 'eaf'])
		KG['ID']= KG['ID'].str.replace(':ID', '')
		KG['ID']= KG['ID'].str.replace('X', '23')
		d['eaf']= np.where(d['REF']> d['ALT'], 1 - d.eaf, d.eaf)
		KG['eaf']= np.where(KG['REF']> KG['ALT'], 1- KG.eaf, KG.eaf)
		d['REF']= np.where(d.REF.str.len() > d.ALT.str.len(), 'I', d.REF)
		d['ALT']= np.where(d.REF.str.len()< d.ALT.str.len(), 'I', d.ALT)
		d['REF']= np.where(d.ALT== 'I', 'D', d.REF)
		d['ALT']= np.where(d.REF== 'I', 'D', d.ALT)
		KG['REF']= np.where(KG.REF.str.len() > KG.ALT.str.len(), 'I', KG.REF)
                KG['ALT']= np.where(KG.REF.str.len()< KG.ALT.str.len(), 'I', KG.ALT)
                KG['REF']= np.where(KG.ALT== 'I', 'D', KG.REF)
                KG['ALT']= np.where(KG.REF== 'I', 'D', KG.ALT)
		d.loc[d['REF'] > d['ALT'], ['REF', 'ALT']] = d.loc[d['REF'] > d['ALT'], ['ALT', 'REF']].values
		KG.loc[KG['REF'] > KG['ALT'], ['REF', 'ALT']] = KG.loc[KG['REF'] > KG['ALT'], ['ALT', 'REF']].values
		d['ID']= d['CHR'].apply(str) + ':' + d['POS'].apply(str) + ':' + d['REF'] + ':' + d['ALT']
		d= d[['ID', 'eaf']]
		KG['ID']= KG['ID'] + ':' + KG['REF'] + ':' + KG['ALT']
		KG= KG[['ID', 'eaf']]
		KG= KG.loc[~(KG.ID.isin(d.ID)), :]
		d= pd.concat([d, KG])
		d= d.loc[((d.eaf>0.001) & (d.eaf<0.999)), :]
		d.to_csv(output[0], sep= '\t', header= True, index= False, compression= 'gzip')


def pheno_cohorts(wildcards):
	d = {"allPTD": allPTD_coh_nms, "postTerm": postTerm_coh_nms, "GAraw": GAraw_coh_nms, "GAnrm": GAnrm_coh_nms} 
	wilds= d[wildcards.pheno]
	infiles= expand('/mnt/hdd/common/pol/metaGWAS/sumstats/{pheno}/filtered/{coh}.txt', coh= wilds, pheno= [wildcards.pheno])
	return infiles
	
rule filter:
        'Filter variants accroding to HRC and 1KG allele frequency.'
        input:
                '/mnt/hdd/common/pol/metaGWAS/processed_data/HRC_1KG.txt.gz',
		'/mnt/hdd/common/pol/metaGWAS/sumstats/{pheno}/{coh}_temp.txt'
        output:
                '/mnt/hdd/common/pol/metaGWAS/sumstats/{pheno}/filtered/{coh}.txt'
        threads: 8
        script:
                'filter_SNPs.R'

