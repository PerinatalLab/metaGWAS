CHR_nms= ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22']

rule format_GWAS_HESS:
	'Format GWAS sumstats for HESS heritability.'
	input:
		'/mnt/hdd/common/pol/metaGWAS/sumstats/META/Maternal_GWAMA_GAraw.txt.gz'
	output:
		'/mnt/hdd/common/pol/metaGWAS/HESS/sumstats/GAraw.txt'
	run:
		d= pd.read_csv(input[0], sep= '\t', header= 0, usecols= ['CHR', 'ID', 'POS', 'REF', 'EFF', 'BETA', 'SE', 'TOTALSAMPLESIZE', 'pvalue', 'EAF'])
		d['MAF']= np.where(d.EAF> 0.5, 1 - d.EAF, d.EAF)
		d= d.loc[d.MAF>= 0.01, :]
		d['CHR']= np.where(d.CHR== 'X', '23', d.CHR)
		d['Z']= d.BETA / d.SE
		d= d[['ID', 'CHR', 'POS', 'EFF', 'REF', 'Z', 'TOTALSAMPLESIZE', 'pvalue']]
		d.columns= ['SNP', 'CHR', 'BP', 'A1', 'A2', 'Z', 'N', 'pvalue']
		d.sort_values('pvalue', ascending= True, inplace= True)
		d.drop_duplicates(['CHR', 'BP'], keep= 'first', inplace= True)
		d.sort_values(['CHR', 'BP'], ascending= True, inplace= True)
		d.to_csv(output[0], sep= '\t', header= True, index= False, columns= ['SNP', 'CHR', 'BP', 'A1', 'A2', 'Z', 'N'])

rule select_samples_1KG_HESS:
        'Select non-related samples from 1KG.'
        input:
                '/mnt/hdd/data/geno/references/1000g/populations.txt'
        output:
                temp('/mnt/hdd/common/pol/metaGWAS/HESS/1KG/ids/samples_to_extract.txt'),
		temp('/mnt/hdd/common/pol/metaGWAS/HESS/1KG/ids/chrX_samples_to_extract.txt')
        run:
                d= pd.read_csv(input[0], sep='\t', header= 0)
                pop= ['CEU', 'TSI', 'GBR', 'IBS']
                d= d.loc[d.Population.isin(pop)]
                d['IID']= d['Individual ID']
                d.to_csv(output[0], sep= '\t', header= False, index= False, columns= ['IID', 'Individual ID'])
		d= d.loc[d.Gender== 2, :]
		d.to_csv(output[1], sep= '\t', header= False, index= False, columns= ['IID', 'Individual ID'])

rule vcf_to_bed_KG_HESS:
        '1KG vcf to bed files using plink2'
        input:
                '/mnt/hdd/data/geno/references/1000g/phase3_chr{CHR}.vcf.gz',
                '/mnt/hdd/common/pol/metaGWAS/HESS/1KG/ids/samples_to_extract.txt',
		'/mnt/hdd/common/pol/metaGWAS/HESS/1KG/ids/chrX_samples_to_extract.txt'
        output:
                temp('/mnt/hdd/common/pol/metaGWAS/HESS/1KG/temp/{CHR}.bed'),
                temp('/mnt/hdd/common/pol/metaGWAS/HESS/1KG/temp/{CHR}.bim'),
                temp('/mnt/hdd/common/pol/metaGWAS/HESS/1KG/temp/{CHR}.fam')
        params:
                '/mnt/hdd/common/pol/metaGWAS/HESS/1KG/temp/{CHR}'
        run:
                if '23' not in input[0]: ids= input[1]
		if '23' in input[0]: ids= input[2]
		shell("/home/pol/software/plink2 --vcf {input[0]} --double-id --max-alleles 2 --keep {ids} --maf 0.01 --make-bed --out {params[0]}")

rule format_bim_file_HESS2:
        'Change bim RS id to CHR:POS:REF:EFF.'
        input:
                '/mnt/hdd/common/pol/references/HESS/ressources/1kg_eur_1pct/1kg_eur_1pct_chr{CHR}.bim',
		'/mnt/hdd/common/pol/references/HESS/ressources/1kg_eur_1pct/1kg_eur_1pct_chr{CHR}.bed',
		'/mnt/hdd/common/pol/references/HESS/ressources/1kg_eur_1pct/1kg_eur_1pct_chr{CHR}.fam'
        output:
                temp('/mnt/hdd/common/pol/metaGWAS/HESS/1KG/plink/{CHR}.bim'),
                temp('/mnt/hdd/common/pol/metaGWAS/HESS/1KG/plink/{CHR}.bed'),
                temp('/mnt/hdd/common/pol/metaGWAS/HESS/1KG/plink/{CHR}.fam')
        run:
                d= pd.read_csv(input[0], sep= '\t', header= None, names= ['CHR', 'RSID', 'cm', 'POS', 'A1', 'A2'])
                d['REF']= np.where(d.A1.str.len() > d.A2.str.len(), 'I', d.A1)
                d['EFF']= np.where(d.A2.str.len() > d.A1.str.len(), 'I', d.A2)
                d['REF']= np.where(d.EFF== 'I', 'D', d.REF)
                d['EFF']= np.where(d.REF== 'I', 'D', d.EFF)
                d['CHR']= np.where(d.CHR== 'X', '23', d.CHR)
                d['RSID']= np.where(d.REF > d.EFF, d.CHR.apply(str) + ':' + d.POS.apply(str) + ':' + d.EFF + ':' + d.REF, d.CHR.apply(str) + ':' + d.POS.apply(str) + ':' + d.REF + ':' + d.EFF)
                d= d[['CHR', 'RSID', 'cm', 'POS', 'A1', 'A2']]
                d.to_csv(output[0], sep= '\t', header= False, index= False)
                shell('mv {input[1]} {output[1]}')
                shell('mv {input[2]} {output[2]}')

rule format_LD_blocks_HESS:
	'Format LDBlocks fomr Beriza for HESS.'
	input:
		'/mnt/hdd/common/pol/references/approx_LD_blocks.txt'
	output:
		'/mnt/hdd/common/pol/metaGWAS/HESS/LDblocks/block_chr{CHR}.txt'
	run:
		d= pd.read_csv(input[0], sep= '\t', header= 0)
		d= d.loc[d.chr== 'chr' + wildcards.CHR, :]
		d.columns= ['chr', 'start', 'stop']
		d.to_csv(output[0], sep= '\t', header= True, index= False)

rule HESS_step1:
	'Step 1 of HESS.'
	input:
		'/mnt/hdd/common/pol/metaGWAS/HESS/sumstats/GAraw.txt',
		'/mnt/hdd/common/pol/metaGWAS/HESS/LDblocks/block_chr{CHR}.txt',
		expand('/mnt/hdd/common/pol/metaGWAS/HESS/1KG/plink/{{CHR}}.{ext}', ext= ['bed', 'bim', 'fam'])
	output:
		'/mnt/hdd/common/pol/metaGWAS/HESS/step1/s1_chr{CHR}.info.gz',
		'/mnt/hdd/common/pol/metaGWAS/HESS/step1/s1_chr{CHR}.eig.gz',
		'/mnt/hdd/common/pol/metaGWAS/HESS/step1/s1_chr{CHR}.prjsq.gz',
		'/mnt/hdd/common/pol/metaGWAS/HESS/step1/s1_chr{CHR}.log'
	params:
		'/mnt/hdd/common/pol/metaGWAS/HESS/1KG/plink/{CHR}',
		'/mnt/hdd/common/pol/metaGWAS/HESS/step1/s1'
	threads: 2
	shell:
		'''
		python2 ~/software/hess-0.5.3-beta/hess.py \
		--local-hsqg {input[0]} \
		--chrom {wildcards.CHR} \
		--bfile {params[0]} \
		--partition {input[1]} \
		--out {params[1]}
		'''

rule HESS_step2:
	'Step 2 of HESS.'
	input:
		expand('/mnt/hdd/common/pol/metaGWAS/HESS/step1/s1_chr{CHR}.{ext}', CHR= CHR_nms, ext= ['info.gz', 'eig.gz', 'prjsq.gz'])
	output:
		'/mnt/hdd/common/pol/metaGWAS/HESS/step2/allchrs.txt',
		'/mnt/hdd/common/pol/metaGWAS/HESS/step2/allchrs.log'
	params:
		'/mnt/hdd/common/pol/metaGWAS/HESS/step1/s1',
		'/mnt/hdd/common/pol/metaGWAS/HESS/step2/allchrs'
	shell:
		'''
		python2 ~/software/hess-0.5.3-beta/hess.py --prefix {params[0]} --out {params[1]}
		'''
