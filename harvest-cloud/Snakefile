CHR_nms= ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22']
sample_nms= ['moms', 'dads', 'fets']
cohort_nms= ['harvestm12', 'harvestm24', 'rotterdam1', 'rotterdam2', 'normentfeb', 'normentmay', 'normentjan', 'normentjun']

pheno_nms= ['allPTD', 'GAraw', 'GAnrm', 'postTerm']

allchrs_nms= ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', 'X']

BW_pheno_nms= ['BW_maternal', 'BW_maternal_effect', 'BW_fetal', 'BW_fetal_effect']

repr_trait_nms= ['GA_fetal', 'BW_maternal', 'AFB', 'AMenarche', 'AMenopause', 'NLB', 'Testosterone_fem', 'SHBG_fem', 'Oestradiol_fem', 'POP', 'Testosterone_male', 'PCOS', 'endometriosis', 'BW_fetal', 'BW_maternal_effect', 'BW_fetal_effect', 'leiomyoma_uterus', 'Preeclampsia', 'CBAT_fem', 'CBAT_male', 'SHBG_male', 'Testosterone_only_fem', 'CBAT_only_fem']



include: 'scripts/effect_origin/Snakefile'
#include: 'scripts/LDSCORE/Snakefile'
include: 'scripts/PGS/Snakefile'
include: 'scripts/reports/Snakefile'
include: 'scripts/COJO/Snakefile'
include: 'scripts/mtCOJO/Snakefile'
include: 'scripts/GREML/Snakefile'
include: 'scripts/LDAK/Snakefile'
include: 'scripts/BW_PGS/Snakefile'
include: 'scripts/GxG/Snakefile'
include: 'scripts/ADCY5/Snakefile'
include: 'scripts/figures/Snakefile'
include: 'scripts/MR_repr_phenos/Snakefile'
include: 'scripts/growth_PGS/Snakefile'
rule all:
	'Collect all result files.'
	input:
		'/mnt/work2/pol/metaGWAS/pheno/pheno_trio.txt',
#		expand('/mnt/work2/pol/metaGWAS/PGS/GA/GRS/GA_GRS_{sample}.txt', sample= sample_nms),
#		'/mnt/work2/pol/metaGWAS/pheno/TED/pheno_moms.txt',
#		expand('/mnt/work2/pol/metaGWAS/PGS/GA/GRS/GA_{haplo}.txt', haplo= ['h1', 'h2', 'h3', 'h4']),
		'/mnt/work2/pol/metaGWAS/figures/data/MR_BW.txt',
#		'/mnt/work2/pol/metaGWAS/processed_data/ids/autosomes_IDS.txt',
#		'/mnt/work2/pol/metaGWAS/LDSCORE/data/MOBAGENETICS.bed',
#		'/mnt/work2/pol/metaGWAS/LDSCORE/ldscores/MOBAGENETICS.l2.ldscore.gz'
#		expand('/mnt/work2/pol/metaGWAS/effect_origin/single_variant/processed_data/haplotypes/{haplo}_PREG_ID', haplo= ['h1', 'h2', 'h3', 'h4']),
#		'/mnt/work2/pol/metaGWAS/effect_origin/results/MoBaGENETICS.txt',
#		expand('/mnt/work2/pol/metaGWAS/cojo/results/{pheno}.jma', pheno= ['GAraw', 'allPTD', 'postTerm']),
#		'/mnt/work2/pol/metaGWAS/GREML/data/GREML/GAraw_h2_REML.txt',
#		'/mnt/work2/pol/metaGWAS/LDAK/h2/results_allchrs.txt',
#		expand('/mnt/work2/pol/metaGWAS/mtCOJO/results/{BW_pheno}_GA.mtcojo.cma', BW_pheno= BW_pheno_nms),
#		expand('/mnt/work2/pol/metaGWAS/mtCOJO/results/GA_{BW_pheno}.mtcojo.cma', BW_pheno= BW_pheno_nms),
#		expand('/mnt/work2/pol/metaGWAS/PGS/BW/independent/MOBA_{sample}_BW_fetal_effect.clumped', sample= sample_nms),
#		expand('/mnt/work2/pol/metaGWAS/PGS/BW/GRS/BW_fetal_effect_GRS_{sample}.txt', sample= sample_nms),
#		'/mnt/work2/pol/metaGWAS/GxE_BW/results/GAraw.txt',
		expand('/mnt/work2/pol/metaGWAS/PGS/BW/GRS/BW_{haplo}.txt', haplo= ['h1', 'h2', 'h3', 'h4']),
#		expand('/mnt/work2/pol/metaGWAS/mtCOJO/results/{BW_pheno}_GA_fetal.mtcojo.cma', BW_pheno= BW_pheno_nms),
#		'/mnt/work2/pol/metaGWAS/ADCY5/processed_data/haplotypes/h1_PREG_ID',
#		expand('/mnt/work2/pol/metaGWAS/ADCY5/processed_data/dosages/{sample}_DS3', sample= sample_nms),
#		'/mnt/work2/pol/metaGWAS/figures/data/ADCY5_individual_level.txt',
#		'/mnt/work2/pol/metaGWAS/figures/data/MR_repr_phenos.txt',
#		'/mnt/work2/pol/metaGWAS/figures/data/MR_BW.txt',
#		expand('/mnt/work2/pol/metaGWAS/MR/haplotypes/{repr_trait}_{haplo}.txt', haplo= ['h1', 'h2', 'h3', 'h4'], repr_trait= repr_trait_nms),
#		expand('/mnt/work2/pol/metaGWAS/MR/GRS/final/{repr_trait}_GRS_{sample}.txt', sample= sample_nms, repr_trait= repr_trait_nms),
#		'/mnt/work2/pol/metaGWAS/figures/data/MR_repr_phenos_GA_fetal.txt',
#		'/mnt/work2/pol/metaGWAS/figures/data/MR_repr_phenos_individual_level.txt',
#		'/mnt/work2/pol/metaGWAS/MR/MVMR/data/corr_matrix/norsid_rho.ld',
#		'/mnt/work2/pol/metaGWAS/haplotype_analysis/pheno/spont_GA.txt',
#		'/mnt/work2/pol/metaGWAS/haplotype_analysis/rsids/GAraw.txt',
#		expand('/mnt/work2/pol/metaGWAS/growth/GRS/growth_GRS_{sample}_{haplotype}.txt', sample= sample_nms, haplotype= ['MT', 'MnT', 'PT']),
#		expand('/mnt/work2/pol/metaGWAS/growth/GRS/growth_{haplotype}_{haplo}.txt', haplotype= ['MT', 'MnT', 'PT'], haplo= ['h1', 'h2', 'h3', 'h4'])
		'/mnt/work2/pol/metaGWAS/MR/repr_traits/delivery/lh/MR_repr_traits_indiv_level.txt'

def selectUnrelated(input_kin, df, x):
	kin= pd.read_csv(input_kin, header= 0, sep= '\t')
	kin= kin.loc[kin.Kinship > 0.125, :]
	kin= kin.loc[kin.ID1.isin(x.values)]
	kin= kin.loc[kin.ID2.isin(x.values)]
	kin= kin.loc[:, ['ID1','ID2','Kinship']]
	kin_temp= kin.copy()
	kin_temp.columns= ['ID2', 'ID1', 'Kinship']
	kin_temp= kin_temp.append(kin)
	kin_temp['n']= kin_temp.groupby('ID1')['ID1'].transform('count')
	kin_temp['nn']= kin_temp.groupby('ID2')['ID2'].transform('count')
	kin_temp.sort_values(by=['n', 'nn'], inplace= True)
	to_keep= list()
	for i in range(0, len(kin_temp.index)):
		if kin_temp.iloc[i, 0] in kin_temp.iloc[0:i, 1].values:
			kin_temp.iloc[i, 1]= "X"
		else:
			to_keep.append(kin_temp.iloc[i, 0])
	to_remove= [i for i in kin_temp.ID1 if i not in to_keep]
	to_remove= list(set(to_remove))
	remove= pd.DataFrame({'FID': to_remove})
	remove['IID']= remove.FID
	return remove

rule phenofile:
        'Merge all data necessary to create a phenotype file for spontaneous delivery and PROM.'
        input:
                '/mnt/work/pol/rotterdam2/pheno/rotterdam2_mfr.csv',
		'/mnt/work/pol/MOBAGENETICS/PREG_ID_to_IID.txt',
		'/mnt/archive/MOBAGENETICS/genotypes-base/aux/flaglist-merged/mobagen-flaglist-n99259.txt',
		'/mnt/work/pol/MOBAGENETICS/pca_out.txt'
        output:
                temp('/mnt/work2/pol/metaGWAS/pheno/temp_pheno.txt')
        script:
                'scripts/pheno_file.R'

rule add_PCA_remove_related:
	'Remove related and add PCA.'
	input:
		'/mnt/archive/MOBAGENETICS/genotypes-base/aux/pca/mobagen-total/mobagen-total-proj-pc',
		'/mnt/archive/MOBAGENETICS/genotypes-base/aux/pedigree/mobagen-ethnic-core-samples.kin0',
		'/mnt/work2/pol/metaGWAS/pheno/temp_pheno.txt'
	output:
		'/mnt/work2/pol/metaGWAS/pheno/pheno_trio.txt',
		'/mnt/work2/pol/metaGWAS/pheno/pheno_moms.txt',
		'/mnt/work2/pol/metaGWAS/pheno/pheno_fets.txt',
		'/mnt/work2/pol/metaGWAS/pheno/pheno_dads.txt'
	run:
		d= pd.read_csv(input[2], header= 0, sep= '\t')
		pca= pd.read_csv(input[0], header= 0, sep= '\t')
		remove= selectUnrelated(input[1], d, d.Mother)
		d['Mother']= np.where(d.Mother.isin(remove), np.nan, d.Mother)
		remove= selectUnrelated(input[1], d, d.Child)
		d['Child']= np.where(d.Child.isin(remove), np.nan, d.Child)
		remove= selectUnrelated(input[1], d, d.Father)
		d['Father']= np.where(d.Father.isin(remove), np.nan, d.Father)
		moms= pd.merge(d, pca, how= 'left', left_on= 'Mother', right_on= 'IID')
		fets= pd.merge(d, pca, how= 'left', left_on= 'Child', right_on= 'IID')
		dads= pd.merge(d, pca, how= 'left', left_on= 'Father', right_on= 'IID')
		d= pd.merge(d, pca, how= 'left', left_on= 'Child', right_on= 'IID')
		d.dropna(subset= ['Child', 'Mother'], inplace= True)
		d.fillna('NA', inplace= True)
		d.to_csv(output[0], sep= '\t', header= True, index= False)
		moms.to_csv(output[1], sep= '\t', header= True, index= False)
		fets.to_csv(output[2], sep= '\t', header= True, index= False)
		dads.to_csv(output[3], sep= '\t', header= True, index= False)

rule phenofile_full_cohort:
	''
	input:
		'/mnt/work/pol/MOBAGENETICS/rotterdam2_mfr.csv',
                '/mnt/work/pol/MOBAGENETICS/PREG_ID_to_IID.txt',
                '/mnt/archive/MOBAGENETICS/genotypes-base/aux/flaglist-merged/mobagen-flaglist-n99259.txt',
                '/mnt/work/pol/MOBAGENETICS/pca_out.txt'
	output:
		temp('/mnt/work2/pol/metaGWAS/haplotype_analysis/pheno/temp_pheno.txt')
	script:
		'scripts/pheno_file.R'

rule add_PCA_full_cohort:
	''
	input:
		'/mnt/archive/MOBAGENETICS/genotypes-base/aux/pca/mobagen-total/mobagen-total-proj-pc',
                '/mnt/work2/pol/metaGWAS/haplotype_analysis/pheno/temp_pheno.txt'
	output:
		'/mnt/work2/pol/metaGWAS/haplotype_analysis/pheno/spont_GA.txt'
	run:
		d= pd.read_csv(input[1], header= 0, sep= '\t')
		pca= pd.read_csv(input[0], header= 0, sep= '\t')
		fets= pd.merge(d, pca, how= 'left', left_on= 'Child', right_on= 'IID')
		fets= fets[['Mother', 'Child', 'Father', 'PREG_ID', 'spont', 'SVLEN_SM_DG', 'SVLEN_UL_DG', 'PARITY', 'cohort', 'PC1', 'PC2', 'PC3', 'PC4', 'PC5', 'PC6', 'PC7', 'PC8', 'PC9', 'PC10']]
		fets.dropna(inplace= True)
		fets.columns= ['Mother', 'Child', 'Father', 'PREG_ID', 'spont', 'SVLEN_SM_DG', 'SVLEN_UL_DG', 'PARITY', 'cohort', 'PC1', 'PC2', 'PC3', 'PC4', 'PC5', 'PC6', 'PC7', 'PC8', 'PC9', 'PC10']
		fets.to_csv(output[0], sep= '\t', header= True, index= False)

rule rsids_haplotype:
	'Extract list of top rsids for haplotype based analysis.'
	input:
		'/mnt/work2/pol/metaGWAS/topregions/top_variants/GAraw.txt'
	output:
		'/mnt/work2/pol/metaGWAS/haplotype_analysis/rsids/GAraw.txt'
	shell:
		'cut -f7 {input[0]} > {output[0]}'


rule phenofile_trio:
        'Pheno file for trio analysis.'
        input:
                '/mnt/work/pol/MOBAGENETICS/rotterdam2_mfr.csv',
                '/mnt/work/pol/MOBAGENETICS/PREG_ID_to_IID.txt',
                '/mnt/archive/MOBAGENETICS/genotypes-base/aux/flaglist-merged/mobagen-flaglist-n99259.txt',
                '/mnt/work/pol/MOBAGENETICS/pca_out.txt',
		'/mnt/work2/pol/metaGWAS/effect_origin/aux/ids/parent_offspring_trios.txt'
        output:
                '/mnt/work2/pol/metaGWAS/effect_origin/aux/pheno/temp/temp_pheno_moms.txt',
                '/mnt/work2/pol/metaGWAS/effect_origin/aux/pheno/temp/temp_pheno_fets.txt',
                '/mnt/work2/pol/metaGWAS/effect_origin/aux/pheno/temp/temp_pheno_dads.txt'
        script:
                'scripts/trio_pheno_file.R'

rule concat_phenos_PCA:
        'Concat pheno files, and add PCA.'
        input:
                '/mnt/archive/MOBAGENETICS/genotypes-base/aux/pca/mobagen-total/mobagen-total-proj-pc',
                '/mnt/work2/pol/metaGWAS/effect_origin/aux/pheno/temp/temp_pheno_{sample}.txt',
                '/mnt/archive/MOBAGENETICS/genotypes-base/aux/pedigree/mobagen-ethnic-core-samples.kin0'
        output:
                '/mnt/work2/pol/metaGWAS/effect_origin/pheno/{sample}_pheno.txt',
                '/mnt/work2/pol/metaGWAS/effect_origin/pheno/aux/ids/samples/{sample}_ids.txt',
        run:
                d= pd.read_csv(input[1], header= 0, sep= '\t')
                pca= pd.read_csv(input[0], header= 0, sep= '\t')
                d= pd.merge(d, pca, how= 'inner', on= 'IID')
                d.fillna('NA', inplace= True)
                d['FID']= d.IID
                d.to_csv(output[0], sep= '\t', header= True, index= False)
                d.to_csv(output[1], sep= '\t', header= False, index= False, columns= ['FID', 'IID'])
