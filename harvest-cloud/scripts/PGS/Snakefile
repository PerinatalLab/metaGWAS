import pandas as pd
import numpy as np


sexCHR_nms= ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22', 'X']

CHR_nms= ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22']

sample_nms= ['moms', 'dads', 'fets']
cohort_nms= ['harvestm12', 'harvestm24', 'rotterdam1', 'rotterdam2', 'normentfeb', 'normentmay']

rule extract_regions_betas_GA_PGS:
        'Obtain two files (regions to extract in one, betas in the other).'
        input:
                '/mnt/work2/pol/metaGWAS/results/meta/Maternal_GWAMA_GAraw.txt.gz',
                '/mnt/work2/pol/metaGWAS/topregions/top_variants/haplotype_GAraw.txt',
                '/mnt/archive/MOBAGENETICS/genotypes-base/aux/markerinfo/all-markerinfo.gz'
        output:
                '/mnt/work2/pol/metaGWAS/GA_PGS/processed_data/regions_extract_GA_{haplo}.txt',
                '/mnt/work2/pol/metaGWAS/GA_PGS/processed_data/GA_betas_{haplo}.txt'
        run:
                d= pd.read_csv(input[1], header=0, sep= '\t', usecols= ['CHR', 'POS', 'REF', 'EFF', 'BETA_MnT', 'BETA_MT', 'BETA_PT'])
                d.rename(columns={'BETA_' + wildcards.haplo :'beta'}, inplace= True)
                d= d.loc[d.CHR!= 'X', :]
                d.sort_values(['CHR', 'POS'], inplace= True)
                d['POS']= d.POS.apply(int).apply(str)
                df= d[['CHR', 'POS', 'POS']]
                df.to_csv(output[0], sep= '\t', header= False, index= False)
                d= d[['CHR', 'POS', 'REF', 'EFF', 'beta']]
                d.columns= ['chr', 'pos', 'REF', 'EFF', 'beta']
                d.to_csv(output[1], sep= '\t', header= True, index= False)


rule get_GT_GA_PGS:
        'Extract GT from VCF file for a subset of genetic variants.'
        input:
                '/mnt/work2/pol/metaGWAS/GA_PGS/processed_data/regions_extract_GA_{haplo}.txt',
                '/mnt/work2/pol/metaGWAS/effect_origin/aux/ids/{sample}_toextract.txt',
                '/mnt/archive/MOBAGENETICS/genotypes-base/imputed/all/vcf/{CHR}.vcf.gz'
        output:
                temp('/mnt/work2/pol/metaGWAS/GA_PGS/processed_data/GT/temp/{sample}_gt{CHR}_{haplo}')
        run:
                shell("bcftools query -S {input[1]} -R {input[0]} -f '%CHROM\t%POS\t%REF\t%ALT[\t%GT]\n' {input[2]} -o {output[0]}")

rule add_header_GT_GA_PGS:
        'Add header to genotype files.'
        input:
                '/mnt/work2/pol/metaGWAS/effect_origin/aux/ids/{sample}_toextract.txt',
                '/mnt/work2/pol/metaGWAS/GA_PGS/processed_data/GT/temp/{sample}_gt{CHR}_{haplo}'
        output:
                temp('/mnt/work2/pol/metaGWAS/GA_PGS/processed_data/GT/{sample}_GT{CHR}_{haplo}')
        run:
                cols= ['chr','pos','ref','eff'] + [line.strip() for line in open(input[0], 'r')]
                d= pd.read_csv(input[1], header= None, names= cols, sep= '\t')
                d.drop_duplicates(['chr', 'pos'], keep=False, inplace= True)
                d.to_csv(output[0], sep= '\t', header= True, index= False)

rule concat_GT_chr_GA_PGS:
        'Collect GT from all CHR.'
        input:
                expand('/mnt/work2/pol/metaGWAS/GA_PGS/processed_data/GT/{{sample}}_GT{CHR}_{{haplo}}', CHR= CHR_nms)
        output:
                '/mnt/work2/pol/metaGWAS/GA_PGS/processed_data/GT/{sample}_GT_{haplo}.txt'
        shell:
                '''
                set +o pipefail;
                head -1 {input[0]} > {output[0]}
                cat {input} | grep -v 'chr' >> {output[0]}
                '''



rule get_allele_transmission_GA_PGS:
        'Retrieve allele transmission from family trios (after phasing).'
        input:
                '/mnt/work2/pol/metaGWAS/GA_PGS/processed_data/GT/fets_GT_{haplo}.txt',
                '/mnt/work2/pol/metaGWAS/GA_PGS/processed_data/GT/moms_GT_{haplo}.txt',
                '/mnt/work2/pol/metaGWAS/effect_origin/aux/ids/parent_offspring_trios.txt',
                '/mnt/work2/pol/metaGWAS/GA_PGS/processed_data/GT/dads_GT_{haplo}.txt'
        output:
                '/mnt/work2/pol/metaGWAS/GA_PGS/processed_data/haplotypes/h1_PREG_ID_{haplo}',
                '/mnt/work2/pol/metaGWAS/GA_PGS/processed_data/haplotypes/h2_PREG_ID_{haplo}',
                '/mnt/work2/pol/metaGWAS/GA_PGS/processed_data/haplotypes/h3_PREG_ID_{haplo}',
                '/mnt/work2/pol/metaGWAS/GA_PGS/processed_data/haplotypes/h4_PREG_ID_{haplo}'
        script:
                'allele_transmission.py'


rule calculate_haplotype_GRS_GA_PGS:
        'Calculate GRS for each sample and chromosome.'
        input:
                '/mnt/work2/pol/metaGWAS/GA_PGS/processed_data/haplotypes/{haplo_old}_PREG_ID_{haplo}',
                '/mnt/work2/pol/metaGWAS/GA_PGS/processed_data/GA_betas_{haplo}.txt'
        output:
                '/mnt/work2/pol/metaGWAS/GA_PGS/GRS/GA_{haplo_old}_{haplo}.txt'
        script:
                'calculate_GRS.py'


rule merge_pheno_PGS:
        'Merge each haplotype and the pheno file.'
        input:
                '/mnt/work2/pol/metaGWAS/effect_origin/p1724/pheno/fets_pheno.txt',
                '/mnt/work2/pol/metaGWAS/effect_origin/aux/ids/parent_offspring_trios.txt',
                '/mnt/work2/pol/metaGWAS/GA_PGS/GRS/GA_h1_MT.txt',
                '/mnt/work2/pol/metaGWAS/GA_PGS/GRS/GA_h2_MnT.txt',
                '/mnt/work2/pol/metaGWAS/GA_PGS/GRS/GA_h3_PT.txt'
        output:
                temp('/mnt/work2/pol/metaGWAS/GA_PGS/GRS/temp/all_subjects.txt')
	run:
		d= pd.read_csv(input[0], sep= '\t', header= 0)
		ids= pd.read_csv(input[1], sep= '\t', header= 0)
		d= pd.merge(d, ids[['Child', 'Mother', 'Father']], left_on= 'IID', right_on= 'Child')
		df_list= list()
		for i in range(2, len(input)):
			x= pd.read_csv(input[i], sep= '\t', header= 0)
			haplo= input[i].split('_')[-1].replace('.txt', '')
			df_list.append(x)
		x= reduce(lambda x, y: pd.merge(x, y, on = 'PREG_ID', how = 'inner'), df_list)
		x['PREG_ID']= x.PREG_ID.apply(int).apply(str)
		d['PREG_ID']= d.PREG_ID.apply(int).apply(str)
		x= pd.merge(x, d, on= 'PREG_ID')
		print(x.columns)
		print(x.shape[0])
		x.to_csv(output[0], sep= '\t', header= True, index= False)

rule remove_related_PGS_GA:
        'Remove related individuals'
        input:
                '/mnt/work2/pol/metaGWAS/GA_PGS/GRS/temp/all_subjects.txt',
                '/mnt/archive/MOBAGENETICS/genotypes-base/aux/pedigree/mobagen-ethnic-core-samples.kin0'
        output:
                '/mnt/work2/pol/metaGWAS/GA_PGS/GRS/all_subjects.txt'
	run:
		d= pd.read_csv(input[0], sep= '\t', header= 0)
                remove= selectUnrelated(input[1], d, d.Child)
                d= d.loc[~d.Child.isin(remove), :]
                remove= selectUnrelated(input[1], d, d.Mother)
                d= d.loc[~d.Mother.isin(remove), :]
                remove= selectUnrelated(input[1], d, d.Father)
                d= d.loc[~d.Father.isin(remove), :]
                d.to_csv(output[0], sep= '\t', header= True, index= False)
