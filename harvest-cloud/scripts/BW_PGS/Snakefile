import pandas as pd
import numpy as np

CHR_nms= [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,21, 22, 23]

rule extract_regions_betas_BW_PGS:
	'Obtain two files (regions to extract in one, betas in the other).'
	input:
		'/mnt/work2/pol/metaGWAS/PGS/BW/raw_data/bw_SEM.txt'
	output:
		'/mnt/work2/pol/metaGWAS/PGS/BW/fetal_effect/processed_data/regions_extract.txt',
		'/mnt/work2/pol/metaGWAS/PGS/BW/fetal_effect/processed_data/betas.txt'
	run:
		d= pd.read_csv(input[0], sep= '\t', header= 0)
		d= d.loc[d.classification== 'Fetal Only', :]
		d.rename(columns= {'Beta_fetal': 'beta'}, inplace= True)
		df= d[['chr', 'pos','pos']]
		df.to_csv(output[0], sep= '\t', header= False, index= False)
		d= d[['chr', 'pos', 'REF', 'EFF','beta']]
		d.columns= ['chr', 'pos', 'REF', 'EFF', 'beta']
		d.to_csv(output[1], sep= '\t', header= True, index= False)


rule get_DS_GS_PGS_BW_fetal_effect:
	'Extract DS from VCF file for a subset of genetic variants.'
	input:
		'/mnt/work2/pol/metaGWAS/PGS/BW/fetal_effect/processed_data/regions_extract.txt',
		'/mnt/work2/pol/metaGWAS/ids/processed_data/{sample}_toextract.txt',
		'/mnt/archive/MOBAGENETICS/genotypes-base/imputed/all/vcf/{CHR}.vcf.gz'
	output:
		temp('/mnt/work2/pol/metaGWAS/PGS/BW/processed_data/dosages/temp/{sample}_ds{CHR}')
	run:
		shell("bcftools query -S {input[1]} -R {input[0]} -f '%CHROM\t%POS\t%REF\t%ALT[\t%DS]\n' {input[2]} -o {output[0]}")


rule add_header_GA_PGS_BW_fetal_effect:
        'Add header to dosage files.'
        input:
                '/mnt/work2/pol/metaGWAS/PGS/BW/processed_data/dosages/temp/{sample}_ds{CHR}',
                '/mnt/work2/pol/metaGWAS/ids/processed_data/{sample}_toextract.txt'
        output:
                temp('/mnt/work2/pol/metaGWAS/PGS/BW/processed_data/dosages/{sample}_DS{CHR}')
        run:
                cols= ['chr','pos','ref','eff'] + [line.strip() for line in open(input[1], 'r')]
                d= pd.read_csv(input[0], header= None, names= cols, sep= '\t')
                d.drop_duplicates(['chr', 'pos'], keep=False, inplace= True)
                d.to_csv(output[0], sep= '\t', header= True, index= False)

rule calculate_GRS_GA_PGS_BW_fetal_effect:
        'Calculate GRS for each sample and chromosome.'
        input:
                '/mnt/work2/pol/metaGWAS/PGS/BW/processed_data/dosages/{sample}_DS{CHR}',
		'/mnt/work2/pol/metaGWAS/PGS/BW/fetal_effect/processed_data/betas.txt'
        output:
                temp('/mnt/work2/pol/metaGWAS/PGS/BW/processed_data/GRS/BW_fetal_effect_GRS_{sample}_{CHR}.txt')
        script:
                'calculate_GRS.py'

rule concat_CHR_GRS_GA_PGS_BW_fetal_effect:
        'Concat GRS from all CHR for each sample.'
        input:
                expand('/mnt/work2/pol/metaGWAS/PGS/BW/processed_data/GRS/BW_fetal_effect_GRS_{{sample}}_{CHR}.txt', CHR= CHR_nms)
        output:
                temp('/mnt/work2/pol/metaGWAS/PGS/BW/processed_data/GRS/BW_fetal_effect_GRS_{sample}_tosum.txt')
        shell:
                '''
                set +o pipefail;
                head -1 {input[0]} > {output[0]}
                cat {input} | grep -v 'GRS' >> {output[0]}
                '''

rule sum_GRS_GA_PGS_BW_fetal_effect:
        'Sum chromosome-based GRS for each sample.'
        input:
                '/mnt/work2/pol/metaGWAS/PGS/BW/processed_data/GRS/BW_fetal_effect_GRS_{sample}_tosum.txt'
        output:
                '/mnt/work2/pol/metaGWAS/PGS/BW/GRS/BW_fetal_effect_GRS_{sample}.txt'
        run:
                df= pd.read_csv(input[0], sep= '\t', header= 0)
                df= df.groupby('IID').sum().reset_index()
                df.to_csv(output[0], sep= '\t', header= True, index= False)

rule get_GT_GA_PGS_BW:
        'Extract GT from VCF file for a subset of genetic variants.'
        input:
                '/mnt/work2/pol/metaGWAS/PGS/BW/fetal_effect/processed_data/regions_extract.txt',
                '/mnt/work2/pol/metaGWAS/ids/processed_data/{sample}_toextract.txt',
                '/mnt/archive/MOBAGENETICS/genotypes-base/imputed/all/vcf/{CHR}.vcf.gz'
        output:
                temp('/mnt/work2/pol/metaGWAS/PGS/BW/processed_data/GT/temp/{sample}_gt{CHR}')
        run:
                shell("bcftools query -S {input[1]} -R {input[0]} -f '%CHROM\t%POS\t%REF\t%ALT[\t%GT]\n' {input[2]} -o {output[0]}")

rule add_header_GT_GA_PGS_BW:
        'Add header to genotype files.'
        input:
                '/mnt/work2/pol/metaGWAS/ids/processed_data/{sample}_toextract.txt',
                '/mnt/work2/pol/metaGWAS/PGS/BW/processed_data/GT/temp/{sample}_gt{CHR}'
        output:
                temp('/mnt/work2/pol/metaGWAS/PGS/BW/processed_data/GT/{sample}_GT{CHR}')
        run:
                cols= ['chr','pos','ref','eff'] + [line.strip() for line in open(input[0], 'r')]
                d= pd.read_csv(input[1], header= None, names= cols, sep= '\t')
                d.drop_duplicates(['chr', 'pos'], keep=False, inplace= True)
                d.to_csv(output[0], sep= '\t', header= True, index= False)

rule concat_GT_chr_GA_PGS_BW:
        'Collect GT from all CHR.'
        input:
                expand('/mnt/work2/pol/metaGWAS/PGS/BW/processed_data/GT/{{sample}}_GT{CHR}', CHR= CHR_nms)
        output:
                '/mnt/work2/pol/metaGWAS/PGS/BW/processed_data/GT/{sample}_GT.txt'
        shell:
                '''
                set +o pipefail;
                head -1 {input[0]} > {output[0]}
                cat {input} | grep -v 'chr' >> {output[0]}
                '''

rule get_allele_transmission_GA_PGS_BW:
        'Retrieve allele transmission from family trios (after phasing).'
        input:
                '/mnt/work2/pol/metaGWAS/PGS/BW/processed_data/GT/fets_GT.txt',
                '/mnt/work2/pol/metaGWAS/PGS/BW/processed_data/GT/moms_GT.txt',
                '/mnt/work2/pol/metaGWAS/effect_origin/processed_data/parent_offspring_trios.txt',
                '/mnt/work2/pol/metaGWAS/PGS/BW/processed_data/GT/dads_GT.txt'
        output:
                temp('/mnt/work2/pol/metaGWAS/PGS/BW/processed_data/haplotypes/h1_PREG_ID'),
                temp('/mnt/work2/pol/metaGWAS/PGS/BW/processed_data/haplotypes/h2_PREG_ID'),
                temp('/mnt/work2/pol/metaGWAS/PGS/BW/processed_data/haplotypes/h3_PREG_ID'),
                temp('/mnt/work2/pol/metaGWAS/PGS/BW/processed_data/haplotypes/h4_PREG_ID')
        script:
                'allele_transmission.py'

rule calculate_haplotype_GRS_GA_PGS_BW:
        'Calculate GRS for each sample and chromosome.'
        input:
                '/mnt/work2/pol/metaGWAS/PGS/BW/processed_data/haplotypes/{haplo}_PREG_ID',
                '/mnt/work2/pol/metaGWAS/PGS/BW/fetal_effect/processed_data/betas.txt'
        output:
                '/mnt/work2/pol/metaGWAS/PGS/BW/GRS/BW_{haplo}.txt'
        script:
                'calculate_GRS.py'

